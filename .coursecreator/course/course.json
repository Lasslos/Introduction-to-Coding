{
  "course_version" : 1,
  "summary" : "This is an introductory Kotlin course.\n- The course will be most beneficial for beginner-level Kotlin learners.\n- The course covers core Kotlin features.\n- It contains hands-on examples of Kotlin code implementation and exercises to practice new skills.\n- The course is based on the author's personal experience in Kotlin development.",
  "title" : "Introduction to Coding",
  "programming_language" : "kotlin",
  "language" : "en",
  "course_type" : "Marketplace",
  "items" : [
    {
      "id" : 1874513021,
      "title" : "Hello World",
      "task_list" : [
        {
          "id" : 1359355095,
          "name" : "hello-world",
          "files" : {
            "test/output.txt" : {
              "name" : "test/output.txt",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "ZBLXxCUrVIxpjgD6SKx4AQ=="
            },
            "src/Main.kt" : {
              "name" : "src/Main.kt",
              "placeholders" : [
                {
                  "offset" : 17,
                  "length" : 24,
                  "possible_answer" : "8O6WvlXiuLi1UV/5g2eCg3ZkIxUT/4yXj3VhXWcOt0Y=",
                  "placeholder_text" : "/* Add your code here */"
                }
              ],
              "is_visible" : true,
              "text" : "NDA7NYDJ4pT3F7ChgC7OnRScOVyGtT8IVVopDVPp7YZK3eP4FhJ5auCO53KZPDcA"
            }
          },
          "description_text" : "<html>\n<h2>Hello World</h2>\n\n<p>\n    This is an introductory course to the Kotlin Programming Language, made by Laslo Hauschild.\n    It is meant for absolute beginners.\n</p>\n<p>\n    Kotlin uses the <strong>Java Virtual Machine</strong> to run its code.\n    That means, everything that works with Java works with Kotlin.\n    Kotlin is the <strong>better Java</strong>. In 2016, Google announced to replace Java\n    with Kotlin as the preferred language for Android App Development. And its usage go much further.\n</p>\n<p>\n    Your very first program will do the following: Output <strong>Hello World</strong>\n    in the console. Use the hints below as instructions.\n</p>\n<div class=\"hint\"><pre><code>\n    fun main {\n    &nbsp;&nbsp;//Your code goes here.\n    }\n</code></pre></div>\n\n<div class=\"hint\">\n  Use <code>println(\"Your text here\")</code> to output something to the console.\n</div>\n<div class=\"hint\">\n    Use the Check-Button below to check your answer\n</div>\n</html>",
          "description_format" : "HTML",
          "task_type" : "output"
        },
        {
          "id" : 1759968715,
          "name" : "How this course works",
          "files" : {
            "src/Task.kt" : {
              "name" : "src/Task.kt",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "BPrPxsoPO0ddRfXxWyDgbA=="
            }
          },
          "description_text" : "<html>\n\n<h2>How this course works</h2>\n\n<p>This course is made for absolute beginners. There will be different types of lessons.</p>\n\n<ul>\n    <li>\n        <strong>Theory:</strong> Instead of reading the description, it should be taught by an experienced programmer.\n        Always code along! That means that you always should try out, how something shown to you works.\n        <strong>Instead of asking what if questions, try it yourself and then ask or make a comment!</strong>\n    </li>\n    <li><strong>Output:</strong> Coding exercise that is validated by output. It starts with the\n        <strong>main function</strong> and uses print.</li>\n    <li><strong>Edu:</strong> Coding exercise that is validated by tests. It starts with a\n    <strong>custom function.</strong> These functions will get some information and return some information.</li>\n</ul>\n<p></p>\n</html>",
          "description_format" : "HTML",
          "task_type" : "theory"
        }
      ],
      "type" : "lesson"
    },
    {
      "id" : 443767882,
      "title" : "Input and Output",
      "task_list" : [
        {
          "id" : 1575731687,
          "name" : "Output",
          "files" : {
            "src/Main.kt" : {
              "name" : "src/Main.kt",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "PGkeS2XbY9cdFraL4MfG5Q=="
            }
          },
          "description_text" : "<html>\n\n<h2>Input and Output</h2>\n\n<p>You already know how to \"output something\". The term for that is printing to the console. It works like that:</p>\n<code>println(\"This text will be printed!\")</code>\n<p>println means print line. It automatically adds a new line after printing.</p>\n<p>There is another way to print stuff:</p>\n<code>print(\"This text will be printed, but without a linebreak!\")</code>\n<p>This does not add another line to the console.</p>\n</html>",
          "description_format" : "HTML",
          "task_type" : "theory"
        },
        {
          "id" : 1830676539,
          "name" : "Input",
          "files" : {
            "src/Main.kt" : {
              "name" : "src/Main.kt",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "ZTzm8QIsbec3Jbr9q6Echw=="
            }
          },
          "description_text" : "<html>\n\n<h2>Input and Output</h2>\n\n<p>Input works a similar way:</p>\n<code>val input = readLine()</code>\n<p>Lets break this down</p>\n<p><code>val</code> - This is a <strong>keyword</strong>. It tells the computer that this is a <strong>val</strong>ue</p>\n<p><code>input</code> - This is the <strong>name</strong> of the value. It can be anything.</p>\n<p><code>=</code> - This is an <strong>operator</strong>. It means <strong>assign to</strong>.\nThe value on the right is assigned to the name on the left.</p>\n<p><code>readLine()</code> - This tells the computer to wait for the users input and gives it to you.</p>\n</html>",
          "description_format" : "HTML",
          "task_type" : "theory"
        },
        {
          "id" : 1160051072,
          "name" : "Greet The User",
          "files" : {
            "src/Main.kt" : {
              "name" : "src/Main.kt",
              "placeholders" : [
                {
                  "offset" : 17,
                  "length" : 24,
                  "possible_answer" : "qoFhFCap5Lat6+RqotP+xVB+V1BNqvqmzUZx7q0oAnUE2ng/O/1AeLrcbco2zjTLQZHA3neKnxLOQXcigs6ByXwLdH9O2+7EhVxts2ANM2JdqLnQurpFO6bPa9oncBhk1OMnUb7qUzkSKGdP9rPK0NiKR3Zu4J9A8j/p/Q9oFRQ=",
                  "placeholder_text" : "/* Add your code here */"
                }
              ],
              "is_visible" : true,
              "text" : "NDA7NYDJ4pT3F7ChgC7OnRScOVyGtT8IVVopDVPp7YZta0KMMYderdRJBnEOedlB"
            }
          },
          "description_text" : "<html>\n\n<h2>Task: Greet the user</h2>\n\n<ul>\n    <li>Write a program that asks the user for their name and greets them with their name.</li>\n</ul>\n</html>",
          "description_format" : "HTML",
          "task_type" : "theory"
        }
      ],
      "type" : "lesson"
    },
    {
      "id" : 1114547439,
      "title" : "If-Statement",
      "task_list" : [
        {
          "id" : 429146650,
          "name" : "Check a condition",
          "files" : {
            "src/Main.kt" : {
              "name" : "src/Main.kt",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "r78sGZKn2sJUsa1f9cbzwuE26Lb2O8BdwhbQAC11W/o="
            }
          },
          "description_text" : "<html>\n\n<h2>Check a condition.</h2>\n<p>Almost every program wants to do something when certain conditions apply. In Kotlin, we do the following:</p>\n<pre><code>\n    if (condition) {\n        //Do stuff\n    }\n</code></pre>\n<p>All the code inside the curly brackets will only run when the condition is true.</p>\n<p>A valid if-statement is for example:</p>\n<pre><code>\n    val input = readLine()\n    if (input == \"Joe\") {\n        println(\"Mama\")\n    }\n</code></pre>\n<p>Lets break this down again.</p>\n<p>We use <code>readLine()</code> to get some input from the user.</p>\n<p><code>input == \"Joe\"</code> checks if the input <strong>is equal to</strong> \"Joe\"</p>\n<p>If that is the case, it will print \"Mama\"</p>\n<p>To check if something is <strong>not equal to something</strong>, use <code>input != \"Joe\"</code></p>\n</html>",
          "description_format" : "HTML",
          "task_type" : "theory"
        },
        {
          "id" : 466234659,
          "name" : "Greeting 2.0",
          "files" : {
            "src/Main.kt" : {
              "name" : "src/Main.kt",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "NDA7NYDJ4pT3F7ChgC7OnferQh7YfJ3P/IbTMFgUNW/1YqmPCQAstf8F3+Bh8xvECdc4FObRxDJJQ6H/PBp+99FQbPKy2tdl2ogGS0z8Yrk5HXyOGnrx+hlZAHUQRHEhD4vIYDq4buKjwU69PDrfnye+4e4Cd4Q/99M09sjUICtWZ+ixd09xI3BpIHISZpVdKa9GzzHQ80FMgjH9WTqgdcwgzGyujN0dxRQYLnJ3Eb5PgHSX7ofY4Zkq9cMXfi2nB8Oe+sIJyFhRpWxFuooKpqfnx7q3BTt7lMjRZ+ngSX4WHwa6ySvBxZCeP6d7mRK9"
            }
          },
          "description_text" : "<html>\n\n<h2>Greeting 2.0</h2>\n\n<ul>\n    <li>Write a program that asks a person for their name.</li>\n    <li>If the name is Mr. Treber, then print \"Good morning sir!\"</li>\n    <li>If the name is not Mr. Treber, print \"Hello there!\"</li>\n</ul>\n</html>",
          "description_format" : "HTML",
          "task_type" : "theory"
        },
        {
          "id" : 2034253603,
          "name" : "And, Or, Not, Else,",
          "files" : {
            "src/Main.kt" : {
              "name" : "src/Main.kt",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "r78sGZKn2sJUsa1f9cbzwuE26Lb2O8BdwhbQAC11W/o="
            }
          },
          "description_text" : "<html>\n\n<h2>And, Or, Else</h2>\n\n<p>Often, we want to check if two conditions are true at the same time. <br>\n    To do that, we use the operator <strong>and</strong>. It works like that:\n</p>\n<pre><code>\n    if (oneCondition && anotherCondition) {\n        //Only runs when both are true\n    }\n</code></pre>\n\n<p>Similarly, there is <strong>or</strong>:</p>\n<pre><code>\n    if (oneCondition || anotherCondition) {\n        //Only runs when at least one of them is true\n    }\n</code></pre>\n<p>When you want to run something unless the condition is true, use <strong>not</strong>:</p>\n<pre><code>\n    if (!oneCondition) {\n        //Only runs when one condition is not true\n    }\n</code></pre>\n<p>Probably the most important feature is the keyword <strong>else</strong>:</p>\n<pre><code>\n    if (oneCondition) {\n        //Run stuff\n    } else if (anotherCondition) {\n        //Only runs when oneCondition doesn't apply but anotherCondition does\n    } else {\n        //Only runs as a \"fallback\", when both conditions don't apply.\n    }\n</code></pre>\n<p>Both the <code>else if</code> and <code>else</code> block are optional in an if-statement.</p>\n</html>",
          "description_format" : "HTML",
          "task_type" : "theory"
        },
        {
          "id" : 2035395917,
          "name" : "Greeting 3.0",
          "files" : {
            "src/Task.kt" : {
              "name" : "src/Task.kt",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "NDA7NYDJ4pT3F7ChgC7OnferQh7YfJ3P/IbTMFgUNW/1YqmPCQAstf8F3+Bh8xvEa7wyfZ1iNq2EwADk99DnHRiOzF1kS9PDAe4qRFfbvI7jvqacRjyaHXRsnhA7dCl2x7Aly3hnvajTdDqZlSRDSYZ/9EuejT6IwtIbO4CfAZq1ciP9Es9h4ooCrCcVDytmFSH7CoHKu0kn6w2DMbgOhaIxhiyV4C/l4+CLm1g+s4MUSf26wjqVhmNiraBKWnqY4l+bgToDn6zy/jGkpMCpmpne+Lv8czJ6MPmQxkJG126Q6nwXBdRPF1iEiXqbnN6JtR+mQcTNjYpt6lwbhMuBLFQbNvbiHxEGwXvyl6k48rrbkbm2SLT6+Y9aeL6ki5DGyJovh8wbkH0gNL3OCxC2O3kV+zB3dG/zJQzef8TOcLw1s8dBhxIZge0SAwVqdARHBfioL5OQtFXVH8fmNUny+XNNzcvNHg9xbN9kSPE0atn8g1VUTXmHTpmQ/UfBQsxaNyZQ4W/Lfav9WudX+xPkZw=="
            }
          },
          "description_text" : "<html>\n\n<h2>Greeting 3.0</h2>\n\n<h5>Please ignore the message: \"Cascade 'if' should be replaced with 'when'.\"\nYou will learn that soon enough.</h5>\n<ul>\n    <li>Write a program that asks a person for their name.</li>\n    <li>If the name is Mr. Treber or Mr. Dolgopol, then print \"Good morning sir!\"</li>\n    <li>If the name is Joe, respond \"Mama!\"</li>\n    <li>If the name is Google Assistant, greet it with \"Hey Google!\"</li>\n    <li>If the name is not theirs, print \"Hello there!\"</li>\n</ul>\n</html>",
          "description_format" : "HTML",
          "task_type" : "theory"
        }
      ],
      "type" : "lesson"
    },
    {
      "id" : 929031371,
      "title" : "Math with Kotlin",
      "task_list" : [
        {
          "id" : 250209258,
          "name" : "introduction",
          "files" : {
            "src/Main.kt" : {
              "name" : "src/Main.kt",
              "placeholders" : [
                {
                  "offset" : 17,
                  "length" : 28,
                  "possible_answer" : "sP+ospqS1mq5l2Z5OUe7og==",
                  "placeholder_text" : "/*Write your own code here*/"
                }
              ],
              "is_visible" : true,
              "text" : "NDA7NYDJ4pT3F7ChgC7OnQYHtnCrCfDV6ZvoxRVx5jV9EeEIJXPfsPbXEK8brNk51rblsl8L1J1HoXuhJXJxtw=="
            }
          },
          "description_text" : "<html>\n\n<h2>Math with Kotlin</h2>\n\n<h4>\n    Disclaimer: This lesson is meant to be taught by an experienced programmer.\n</h4>\n<p>\n    Computers are great in two things: Math and storing data. <br>\n    Today, we are going to cover the math part. <br>\n    <strong>This is very important to become a good programmer. </strong>\n    It would be optimal if you had someone teaching you this instead of learing it yourself.\n</p>\n\n<p>\n    Start off by trying to put some basic addition, e.g. \"1 + 2\"\n    into a print statement. It is explained in the first hint again.\n    Don't forget to put <strong>Quotation Marks</strong>.\n</p>\n<div class=\"hint\">\n    Use println(\"Your text here\") to output something to the console.\n</div>\n\n<details><summary><strong>Open this after you tried</strong></summary>\n    <p style=\"margin-top: 12px;\">\n        As you may have noticed, it didn't do any math. That's because a print statement with quotation marks\n        takes the input as a <strong>String</strong>, which is the word for <strong>Text</strong> in programming.\n    </p>\n    <p>\n        Please go on with the next lesson.\n    </p>\n</details>",
          "description_format" : "HTML",
          "task_type" : "theory"
        },
        {
          "id" : 143080116,
          "name" : "input",
          "files" : {
            "src/Main.kt" : {
              "name" : "src/Main.kt",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "NDA7NYDJ4pT3F7ChgC7OnY7PiQg0Z9w3V0uXkpoQ4U1bA82PIPbBUwzzqamNfgOY"
            }
          },
          "description_text" : "<html>\n\n<h2>Input</h2>\n<p>So far, we used <code>readLine()</code> to get user input. The problem is that this will always be text, not numbers.</p>\n<p>To get numbers, we do the following:</p>\n<code>var input = readLine()!!.toInt()</code>\n<p>You already know what <code>var input = readLine()</code> does. Let's break the rest apart: <br>\n    <code>!!</code> - This is to tell the computer that we don't care about null safety. You don't have to understand that\n    right now. <br>\n    <code>.toInt()</code> - In Kotlin, there are different <strong>types of data</strong>. Here are some that you should know:\n</p>\n<ul>\n    <li>String - Plain Text</li>\n    <li>Integer (short form: int) - Whole Numbers, so without decimal places</li>\n    <li>Double - Numbers with decimal places.</li>\n    <li>Boolean - True or False</li>\n</ul>\n<p>To change the data type, you have to use a <strong>typecast</strong>. And that is exactly what\n<code>.toInt()</code> does. Be aware that if you put an invalid string into .toInt, it will give you\nan error. How to solve that issue will be discussed later.</p>\n</html>",
          "description_format" : "HTML",
          "task_type" : "theory"
        },
        {
          "id" : 758046028,
          "name" : "math",
          "files" : {
            "src/Main.kt" : {
              "name" : "src/Main.kt",
              "placeholders" : [
                {
                  "offset" : 17,
                  "length" : 19,
                  "possible_answer" : "gUF5N0IW3Mp7x+q501UV/0hTlenlewndF2Nnuaz0Hucgcxz9xxsC0+6hYT4E878KmPNCxX9IFS9CYvVsRy9rG8B8cYlgsvUlltZtYMSYne9RNATYRlX8T4V5KLYH7fhH0qry8nfYlWapbScvh7fvGFy8Vf3Q4A8aFtdjZT7f8/8=",
                  "placeholder_text" : "/*Try it out here*/"
                }
              ],
              "is_visible" : true,
              "text" : "NDA7NYDJ4pT3F7ChgC7OnSijbt/zW3FAHWqMHxV1ZeFWuBl3JctCswh+jImUnzbP"
            }
          },
          "description_text" : "<html>\n\n<h2>Math with Kotlin</h2>\n\n<p>\n    Try the same thing again, but this time without the quotation marks.\n    It should act like a calculator. So, lets go over some operations.\n</p>\n\n<p>\n    Try to do simple addition. How does it work?\n</p>\n<div class=\"hint\">\n    Use <strong>+</strong> to do addition.\n</div>\n<p>\n    Try to do the same with subtraction.\n</p>\n<div class=\"hint\">\n    Use <strong>-</strong> to do subtraction.\n</div>\n<p>\n    Try out multiplication. If you can't figure out what symbol is used, feel free to use the hint.\n</p>\n<div class=\"hint\">\n    Use <strong>*</strong> to do multiplication.\n</div>\n<p>\n    Division? Pay attention if it rounds, and if yes up or down? What happens if you\n    replace something like <strong>3 / 2</strong> by <strong>3.0 / 2.0</strong>\n</p>\n<div class=\"hint\">\n    Use <strong>/</strong> to do division. Kotlin has two major types of numbers. These are <strong>Integer</strong>\n    and <strong>Double.</strong>. An Integer can represent every <strong>whole number</strong>,\n    while a Double also <strong>supports decimal places</strong>.\n    When doing an Integer Division, Kotlin will always <strong>round down.</strong>\n</div>\n<p>\n    Does Kotlin follow <strong>BEDMAS?</strong> Does it support <strong>( or ) ?</strong> Try it out!\n</p>\n<div class=\"hint\">\n    Kotlin follows the <strong>BEDMAS</strong> rules. That also means you can use <strong>( and )</strong>.\n</div>",
          "description_format" : "HTML",
          "task_type" : "theory"
        },
        {
          "id" : 1883678112,
          "name" : "From 12 to 24 Hour Clock",
          "files" : {
            "src/Main.kt" : {
              "name" : "src/Main.kt",
              "placeholders" : [
                {
                  "offset" : 17,
                  "length" : 26,
                  "possible_answer" : "XfTZN5M5TY1785o7f3lbJ86KyB5kw6a3UwQPMs3N3ZSA/2GG4NIkmnfF5ejwo5WksVmtTxW6WdQVBitPu7imR+b4L6gdaLe9FVqdjCe5KdyectyWc8dJK1K3aREHK9MaLt/BxKJFbaDwDb+TxYC8skB7RwIdpXxHvB84r0LeyRT8e3WTt5AbEYPL4TI1etAxk40uB+LBklOk5Tc7yGA72JVd6ZfgGOjS2fLe73CxsomNydo16BXGOvqsDM+fyM/m2m7N22EpsVf+MegchxoXiTz4qFsqIPvRMiRuN4t8vdTS+Zlk+22S66yuaapCkG8gZ375EKwBYkg3SkoyfnQGiRLNAMGzn9HLMnIj/QeX1/738kpz89i77rpTWBCaR+RVEdzl51OPoPT5y4WHlqGzxdFpE+P/Tq1TD4V6u7q9bwwm3i5QeFL6x9/Z60gciiEhe2lgqrYEBzYqaNKtOGEiUKbjOwsCZ5MdWDaLFV1PzzcNGblqUoaqUnyynYA/Wu9HstnrjdoYmAE+QtyA9zZ3y6ehvXE25UfHYR7fGI/HNlhvWzZ5gmVjyK0LRijyTf7kq7mrqiCInlpSRtlRpIbdC3u0QOdMKgTTzZqsm9tKQAU=",
                  "placeholder_text" : "/* Put your answer here */"
                }
              ],
              "is_visible" : true,
              "text" : "NDA7NYDJ4pT3F7ChgC7OnZLHUtavX+Zq8VMxFNmYVWEuTh4cMDSi55UEj/pct+OD"
            }
          },
          "description_text" : "<html>\n\n<h2>12-Hour Clock, 24-Hour Clock</h2>\n\n<ul>\n    <li>Ask the user for the hour</li>\n    <li>If it's smaller than zero or bigger than 12, tell the user that their input is not valid and end\n    the execution with <strong>return</strong></li>\n    <li>Ask the user for AM or PM</li>\n    <li>If the user enters something that is not either AM or PM, tell the user that their input is not\n    valid and ent the execution with <strong>return</strong></li>\n    <li>Tell the user what time that is in 24-Hour-Clock</li>\n</ul>\n<div class=\"hint\">\n  When it's currently AM, the hour on a 24-Hour clock is the same as on a 12-Hour clock <br>\n    When it's currently PM, the hour on a 24-Hour Clock is exactly 12 bigger than on a 12-Hour clock\n</div>\n</html>",
          "description_format" : "HTML",
          "task_type" : "theory"
        },
        {
          "id" : 239016021,
          "name" : "comparison",
          "files" : {
            "src/Main.kt" : {
              "name" : "src/Main.kt",
              "placeholders" : [
                {
                  "offset" : 17,
                  "length" : 19,
                  "possible_answer" : "bToDJ0vnuimfoINfagW5Ug==",
                  "placeholder_text" : "/*Try it out here*/"
                }
              ],
              "is_visible" : true,
              "text" : "NDA7NYDJ4pT3F7ChgC7OnSijbt/zW3FAHWqMHxV1ZeG+P7Ot++wKV5/SMSAjjeV0"
            }
          },
          "description_text" : "<html>\n\n<h2>Compare numbers to each other.</h2>\n\n<p>Often, we need to compare numbers in if-statements. In Kotlin, we use these operators for it:</p>\n<p><strong><</strong> corresponds to <strong>is smaller than.</strong> Examples: 3 < 2 is false. 5 < 16 is true. 7 < 7 is false.</p>\n<p><strong>></strong> corresponds to <strong>is bigger than.</strong> Examples: 3 > 2 is true. 5 > 16 is false. 7 > 7 is false.</p>\n<p><strong>==</strong> corresponds to <strong>is equal</strong> Examples: 3 == 2 is false. 5 == 16 is false. 7 == 7 is true.</p>\n<p><strong><=</strong> corresponds to <strong>is smaller or equal to.</strong> Examples: 3 <= 2 is false. 5 <= 16 is true. 7 <= 7 is true.</p>\n<p><strong>>=</strong> corresponds to <strong>is bigger or equal to.</strong> Examples: 3 >= 2 is true. 5 >= 16 is false. 7 >= 7 is true.</p>\n<p>Take the time and try to put some of these statements into a print statement. </p>\n</html>\n\n\n",
          "description_format" : "HTML",
          "task_type" : "theory"
        }
      ],
      "type" : "lesson"
    },
    {
      "id" : 762822725,
      "title" : "Variables",
      "task_list" : [
        {
          "id" : 1986574201,
          "name" : "Declare Variables",
          "files" : {
            "src/Main.kt" : {
              "name" : "src/Main.kt",
              "placeholders" : [
                {
                  "offset" : 17,
                  "length" : 19,
                  "possible_answer" : "+CGi8633W6A7LUtqalbziQ==",
                  "placeholder_text" : "/*Try it out here*/"
                }
              ],
              "is_visible" : true,
              "text" : "NDA7NYDJ4pT3F7ChgC7OnSijbt/zW3FAHWqMHxV1ZeG+P7Ot++wKV5/SMSAjjeV0"
            }
          },
          "description_text" : "<html>\n\n<h2>Variables</h2>\n<h3>Disclaimer: This lesson should be taught by an experienced programmer.</h3>\n<p>The first thing that computers are incredibly good in, is storing data. I am going to show\nyou the most convenient way in Kotlin.</p>\n<p>Before we store data, we have to understand data types. You already know a few:</p>\n<ul>\n    <li>String [Text]</li>\n    <li>Integer, called Int [Whole numbers]</li>\n    <li>Double [Numbers with decimal places]</li>\n</ul>\n<p><strong>Before you reveal the hints, try to guess how it could work, if you have an idea.\nThat way, you learn more efficient.</strong></p>\n<p>\n    Write a program that begins with a variable with the value\n    <strong>\"Hello World\"</strong>.\n    Try the following things in the code:\n</p>\n<ul>\n    <li>Print the variable.</li>\n    <li>Change the value in it and print it.</li>\n    <li>Try to change it to a number and print it.</li>\n    <li>Create a new variable with a number in it and do math with it. Use print statements for that.</li>\n    <li>Save the output of a calculation in a variable and print it later.</li>\n    <li>Compare variables instead of numbers, the same way. Also compare a variable to a number.</li>\n\n</ul>\n<div class=\"hint\">\n    How you store data: <br>\n    <code>var [name of variable] = [some data]</code><br>\n    Example: <br>\n    <code>var data = \"Hello World!\"</code>\n</div>\n<div class=\"hint\">\n    You can access the data like that:<br>\n    <code>\n        var data = \"Hello World\" <br>\n        print(data)\n    </code>\n</div>\n<div class=\"hint\">\n    You can also specify the type of data to be stored:<br>\n    <code>var data: String = \"Hello World!\"</code>\n</div>\n<div class=\"hint\">\n    If you want to change the value, simply reassign the variable:<br>\n    <code>data = \"Something else\"</code><br>\n    That will delete the previous value in the variable, and put a new value into it.\n</div>\n<div class=\"hint\">\n    There may be some cases where you want a variable to be unchangeable. It also helps to understand the code,\n    so try to use this feature as often as possible. <br>\n    <code>val moreData = \"This is unmodifiable, because it starts with the keyword val\"</code>\n</div>\n</html>",
          "description_format" : "HTML",
          "task_type" : "theory"
        }
      ],
      "type" : "lesson"
    },
    {
      "id" : 863486098,
      "title" : "Functions",
      "task_list" : [
        {
          "id" : 67720480,
          "name" : "Functions",
          "files" : {
            "src/Main.kt" : {
              "name" : "src/Main.kt",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "NDA7NYDJ4pT3F7ChgC7OnY7PiQg0Z9w3V0uXkpoQ4U1bA82PIPbBUwzzqamNfgOY"
            }
          },
          "description_text" : "<html>\n\n<h2>Functions</h2>\n\n<p>\n    A <strong>functions</strong> is a block of code. It is executed step by step, statement after statement.\n    You already know a function:\n</p>\n<pre><code style=\"display: block;\">\n    fun main() {\n\n    }\n</code></pre>\n<p>However, this is not a very good example of a function, since it leaves out a lot of things that can be done with functions.</p>\n<p>Let's take a look at another example: </p>\n<pre><code style=\"display: block;\">\n    fun printText() {\n\n    }\n</code></pre>\n<p>This is the <strong>main function</strong>. We are going to break it apart to see what we can do with it.</p>\n<p><code>fun</code> -> This is the <strong>keyword</strong> of a function. Every function begins with it.\n    Its purpose is that your computer know what to do with it.</p>\n<p><code>main</code> -> This is the <strong>name</strong> of a function. It can be anything. </p>\n<p><code>()</code> -> This is the <strong>parameter list</strong> of a function. When your function\nneeds to be input in order to run </p>\n</html>",
          "description_format" : "HTML",
          "task_type" : "theory"
        }
      ],
      "type" : "lesson"
    },
    {
      "id" : 323835414,
      "title" : "IF-Statement and Tasks",
      "task_list" : [
        {
          "id" : 1534892046,
          "name" : "If-Statement",
          "files" : {
            "src/Main.kt" : {
              "name" : "src/Main.kt",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "r78sGZKn2sJUsa1f9cbzwuE26Lb2O8BdwhbQAC11W/o="
            }
          },
          "description_text" : "<html>\n\n<h2>IF-Statement</h2>\n\n<p>We are going to take a look at if-statements. They job is very important. You can add optional code,\n    depending on what the situation is.\n</p>\n\n<pre><code>\n    if (something) {\n    &nbsp    //Do stuff\n    }\n</code></pre>\n<p>\n    The something is replaced with a <strong>boolean</strong>. It is a data type that has exactly two states:\n    <strong>true or false</strong>.\n</p>\n<p>\n    You already know some of these\n    booleans. They occur when comparing two numbers to each other.\n    So, an example of a program with an if-statement could be this:\n</p>\n<pre><code style=\"display: block;\">\n    val number = 3\n    if (number < 6) {\n    &nbsp    print(\"The number is smaller than six!\")\n    }\n</code></pre>\n<p>\n    You can enhance your if statement with the keywork <code>else</code>:\n</p>\n<pre><code style=\"display: block;\">\n    val number = 3\n    if (number < 6) {\n        println(\"The number is smaller than six!\")\n    } else {\n        println(\"The number is not smaller than six\")\n    }\n</code></pre>\n<p>\n    For even more specific cases, use the keyword <code>else if</code>:\n</p>\n<pre><code style=\"display: block;\">\n    val number = 3\n    if (number < 6) {\n        println(\"The number is smaller than six!\")\n    } else if (number == 42) {\n        println(\"The number is equal to 42!\")\n    } else {\n        println(\"The number is not smaller than six and not equal to 42!\")\n    }\n</code></pre>\n<p>\n    You\n</p>\n</html>",
          "description_format" : "HTML",
          "task_type" : "theory"
        }
      ],
      "type" : "lesson"
    }
  ],
  "additional_files" : [
    {
      "name" : "build.gradle",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "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"
    }
  ],
  "version" : 12,
  "edu_plugin_version" : "2021.10-2021.2-627"
}